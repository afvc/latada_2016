 
 

/* ---------------#page_size_responsive--------------*/

@mixin breakpoint($min: 0, $max: 0) {
    $type: type-of($min);
    @if $type==string {
        //mobile
        @if $min==xs {
            @media (max-width: 640px) {
                @content;
            }
        }
        //tablet
        @else if $min==sm {
            @media screen and (min-width: 641px) and (max-width: 750px)  {
                @content;
            }
        }
        //medium
        @else if $min==md {
            @media (min-width: 750px) and (max-width: 1200px) {
                @content;
            }
        }
        //large
        @else if $min==lg {
            @media (min-width: 1200px) and (max-width: 1280px) {
                @content;
            }
        }
        //x-large
        @else if $min==xl {
            @media (min-width: 1280px) {
                @content;
            }
        }
        @else {
            @warn "Breakpoint mixin supports: xs, sm, md, lg";
        }
    }
    @else if $type==number {
        $query: "all" !default;
        @if $min !=0 and $max !=0 {
            $query: "(min-width: #{$min}) and (max-width: #{$max})";
        }
        @else if $min !=0 and $max==0 {
            $query: "(min-width: #{$min})";
        }
        @else if $min==0 and $max !=0 {
            $query: "(max-width: #{$max})";
        }
        @media #{$query} {
            @content;
        }
    }
}


/* ---------------#animations--------------*/

@mixin backface-visibility($backface-visibility) {
    -webkit-backface-visibility: $backface-visibility;
    -moz-backface-visibility: $backface-visibility;
    backface-visibility: $backface-visibility;
}

@mixin simple-transition($time) {
    -webkit-transition: all $time;
    -moz-transition: all $time;
    transition: all $time;
}


@mixin scale($size) {
   -webkit-transform: scale($size);
    -moz-transform: scale($size);
    -ms-transform: scale($size);
    transform: scale($size);
}


@mixin translateXandY($translation) {
    -webkit-transform: translateX($translation)translateY($translation);
    -moz-transform: translateX($translation)translateY($translation);
    -ms-transform: translateX($translation)translateY($translation);
    transform: translateX($translation)translateY($translation);
}


/* ---------------#text_size--------------*/

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

$typescale:( 
    heading1: ( xs: 2.7rem, sm: 2.9rem, md: 3.1rem, lg: 3.3rem),
    
    sub1: ( xs: 1rem, sm: 1.05rem, md: 1.1rem, lg: 1.2rem, xl: 1.5rem), 
    
	text1: ( xs: 0.8rem, sm: 0.9rem, md: 0.9rem, lg: 1.02rem),
 
 smalltext1: ( xs: 0.82rem, sm: 0.85rem, md: 0.87rem, lg: 0.88rem), );
 
 




/*
    HOCUS
    ----

    Generate `:hover` and `:focus` styles in one go.
    https://github.com/inuitcss/inuitcss/
*/
@mixin hocus() {
    &:hover,
    &:focus {
        @content;
    }
}

